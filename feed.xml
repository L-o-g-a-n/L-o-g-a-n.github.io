<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://l-o-g-a-n.github.io/</id><title>Logan</title><subtitle>Deeper, deeper.</subtitle> <updated>2022-07-22T21:50:33+09:00</updated> <author> <name>Logan</name> <uri>https://l-o-g-a-n.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://l-o-g-a-n.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://l-o-g-a-n.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Logan </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>C++ 입출력 속도 개선</title><link href="https://l-o-g-a-n.github.io/posts/cpp-io-speed/" rel="alternate" type="text/html" title="C++ 입출력 속도 개선" /><published>2022-07-20T00:00:00+09:00</published> <updated>2022-07-22T21:50:05+09:00</updated> <id>https://l-o-g-a-n.github.io/posts/cpp-io-speed/</id> <content src="https://l-o-g-a-n.github.io/posts/cpp-io-speed/" /> <author> <name>Logan</name> </author> <category term="Computer science" /> <category term="Algorithm" /> <summary> 저번 포스팅에서 언급했던 것처럼 요즘은 프로그래머스에서 넘어와 백준이라는 사이트에서 알고리즘 및 코딩 테스트 공부를 하고 있습니다. 이에 따라 입출력 처리를 직접 해줘야하는 경우가 생기는데, C++이 기본적으로 C의 입출력보다 많이 느려서 이를 개선하는 방법에 대한 포스팅을 해보려고 합니다. C++ 입출력 속도 C와 비교했을 때 C++의 입출력 속도는 얼마나 느린 것인지 알아봤습니다. 실제로 실험 결과를 봤을 때 출력의 경우 큰 차이가 없었지만 입력의 경우 scanf를 쓰는 경우 평균 0.9206초가 걸리고 cin을 쓰는 경우는 평균 2.1742초가 걸리며 2배 이상의 차이가 났습니다. 지금부터는 이렇게 늦은 속도를 어떻게 개선할 수 있는지 알아봅시다. C++ 입출력 속도 개선 결론부터... </summary> </entry> <entry><title>cout 소수점 자릿수 조절</title><link href="https://l-o-g-a-n.github.io/posts/cout-digit/" rel="alternate" type="text/html" title="cout 소수점 자릿수 조절" /><published>2022-07-20T00:00:00+09:00</published> <updated>2022-07-20T00:00:00+09:00</updated> <id>https://l-o-g-a-n.github.io/posts/cout-digit/</id> <content src="https://l-o-g-a-n.github.io/posts/cout-digit/" /> <author> <name>Logan</name> </author> <category term="Computer science" /> <category term="Algorithm" /> <summary> 최근 개인적으로 알고리즘 및 코딩 테스트 준비 사이트를 프로그래머스에서 백준으로 이동하였습니다. 백준과 프로그래머스의 가장 큰 차이점으로 백준은 입력에 대한 처리를 프로그래머가 직접 해줘야 합니다. 그래서 오늘은 입출력과 관련된 부분 중에서 cout을 통해 출력할 때 소수점 및 숫자의 출력 자릿수를 설정하는 방법에 대하여 알아보도록 하겠습니다. 소수점 출력 자릿수 조절 우리는 기본적으로 C++에서 실수를 다룰 때 float와 double과 같은 자료형에 담게 됩니다. 이러한 데이터 타입에 따라 표현할 수 있는 실수의 자릿수는 다 다르겠지만 우리가 별도의 설정 없이 cout을 통하여 float 및 double형의 숫자를 출력하면 정수부+실수부 포함해서 총 6자리까지만 출력이 됩니다. 그 이유는 c... </summary> </entry> <entry><title>카카오_ 완전탐색 - Level2 - 거리두기 확인하기</title><link href="https://l-o-g-a-n.github.io/posts/social-distancing/" rel="alternate" type="text/html" title="카카오_ 완전탐색 - Level2 - 거리두기 확인하기" /><published>2022-07-18T00:00:00+09:00</published> <updated>2022-07-18T00:00:00+09:00</updated> <id>https://l-o-g-a-n.github.io/posts/social-distancing/</id> <content src="https://l-o-g-a-n.github.io/posts/social-distancing/" /> <author> <name>Logan</name> </author> <category term="Computer science" /> <category term="Algorithm" /> <summary> !본 포스팅은 프로그래머스 코딩테스트 카카오 - 거리두기 확인하기 풀이입니다. 처음으로 맞춘 풀이 #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; using namespace std; int vector_to_array(vector&amp;lt;string&amp;gt; v1, char arr[][5]) { for(int i=0; i&amp;lt;5; i++) { for(int j=0; j&amp;lt;5; j++) { arr[i][j] = v1[i][j]; } } return 0; } int calc(char arr[][5]) { for(int i=0; i&amp;lt;... </summary> </entry> <entry><title>카카오_ 문자열 - Level1 - 신고 결과 받기</title><link href="https://l-o-g-a-n.github.io/posts/receive-report-results/" rel="alternate" type="text/html" title="카카오_ 문자열 - Level1 - 신고 결과 받기" /><published>2022-07-18T00:00:00+09:00</published> <updated>2022-07-18T00:00:00+09:00</updated> <id>https://l-o-g-a-n.github.io/posts/receive-report-results/</id> <content src="https://l-o-g-a-n.github.io/posts/receive-report-results/" /> <author> <name>Logan</name> </author> <category term="Computer science" /> <category term="Algorithm" /> <summary> !본 포스팅은 프로그래머스 코딩테스트 카카오 - 신고 결과 받기 풀이입니다. 처음으로 맞춘 풀이 #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;unordered_map&amp;gt; using namespace std; vector&amp;lt;int&amp;gt; solution(vector&amp;lt;string&amp;gt; id_list, vector&amp;lt;string&amp;gt; report, int k) { vector&amp;lt;int&amp;gt; answer(id_list.size()); //일단 report에서 중복 제거 ... </summary> </entry> <entry><title>카카오_ 문자열 - Level1 - 숫자 문자열과 영단어</title><link href="https://l-o-g-a-n.github.io/posts/nums-and-words/" rel="alternate" type="text/html" title="카카오_ 문자열 - Level1 - 숫자 문자열과 영단어" /><published>2022-07-17T00:00:00+09:00</published> <updated>2022-07-17T00:00:00+09:00</updated> <id>https://l-o-g-a-n.github.io/posts/nums-and-words/</id> <content src="https://l-o-g-a-n.github.io/posts/nums-and-words/" /> <author> <name>Logan</name> </author> <category term="Computer science" /> <category term="Algorithm" /> <summary> !본 포스팅은 프로그래머스 코딩테스트 카카오 - 숫자 문자열과 영단어 풀이입니다. 처음으로 맞춘 풀이 #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; int solution(string s) { int answer = 0; vector&amp;lt;string&amp;gt; num = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; for(int i=0; i&amp;lt;num.size(); i++) { while(s.find(num[i]) != string::npos) { s.re... </summary> </entry> </feed>
